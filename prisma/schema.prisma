// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                       String  @id @default(uuid())
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @map("refreshToken") @db.Text
  access_token             String? @map("accessToken") @db.Text
  expires_at               Int?    @map("expiresAt")
  refresh_token_expires_in Int?    @map("refreshTokenExpiresIn")
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime

  @@index([userId])
}

model User {
  id            String        @id @default(uuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  books         Book[]
  answers       Answer[]
  comments      Comment[]
  replies       Reply[]
  fanArts       FanArt[]
  favs          BookFav[]
  CommentLike   CommentLike[]
  ReplyLike     ReplyLike[]
}

model Book {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  thumbnail     String
  title         String        @unique
  description   String
  targetMessage Int
  startDate     DateTime
  endDate       DateTime
  questions     Question[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  hashtags      Hashtag[]
  comments      Comment[]
  replies       Reply[]
  receiveFanArt Boolean
  fanArts       FanArt[]
  favs          BookFav[]
  doesDrop      Boolean
  drop          Drop?
  commentLikes  CommentLike[]
  replyLikes    ReplyLike[]

  @@index([userId])
}

model Drop {
  id           String   @id @default(uuid())
  bank         String
  account      String
  accountOwner String
  minAmount    Int
  endDate      DateTime
  book         Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([bookId])
}

model BookFav {
  id        String   @id @default(uuid())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookId])
  @@index([userId])
}

model FanArt {
  id        String   @id @default(uuid())
  image     String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookId])
  @@index([userId])
}

model Question {
  id        String   @id @default(uuid())
  index     Int
  content   String
  required  Boolean
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  answers   Answer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookId])
}

// TODO: Book 정보 추가할 것. 
model Answer {
  id         String   @id @default(uuid())
  content    String
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String?
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([questionId])
  @@index([userId])
}

model Hashtag {
  id    String @id @default(uuid())
  name  String @unique
  books Book[]
}

model Comment {
  id        String        @id @default(uuid())
  content   String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  book      Book          @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  replies   Reply[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     CommentLike[]

  @@index([userId])
  @@index([bookId])
}

model Reply {
  id        String      @id @default(uuid())
  content   String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  book      Book        @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  comment   Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  likes     ReplyLike[]

  @@index([userId])
  @@index([bookId])
  @@index([commentId])
}

model CommentLike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([commentId])
  @@index([bookId])
}

model ReplyLike {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  reply     Reply    @relation(fields: [replyId], references: [id], onDelete: Cascade)
  replyId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String

  @@index([userId])
  @@index([bookId])
  @@index([replyId])
}
